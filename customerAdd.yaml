openapi: 3.0.0
info:
  title: Liberty Bank API
  description: API для добавления нового клиента
  version: 1.0.0
servers:
  - url: 'http://172.17.1.97:30020'
    description: dev server

tags:
  - name: Customers
    description: Операции с клиентами банка

paths:
  /customer/api/v1/customers:
    post:
      tags:
        - Customers
      summary: Добавить нового клиента банка
      description: Создание новой записи клиента в системе банка
      operationId: addCustomer
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRequest'
            
      responses:
        '201':
          description: Клиент успешно добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerCreatedResponse'
             
        '400':
          description: Некорректный запрос
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              
        '403':
          description: Недостаточно прав для совершения операции
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              
        '409':
          description: Клиент с такими данными уже зарегистрирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
             

components:
  schemas:
    CustomerRequest:
      type: object
      required:
        - customerInfo
        - passportInfo
        - addresses
        - contactsInfo
        - employmentDetails
      properties:
        customerInfo:
          $ref: '#/components/schemas/CustomerInfo'
        passportInfo:
          $ref: '#/components/schemas/PassportInfo'
        addressMatches:
          type: boolean
          description: Совпадают ли адреса регистрации и проживания
        addresses:
          type: array
          minItems: 1
          maxItems: 1
          items:
            $ref: '#/components/schemas/AddressPair'
        employmentDetails:
          $ref: '#/components/schemas/employmentDetails'

    CustomerInfo:
      type: object
      required:
        - firstName
        - lastName
        - tin
        - snils
        - phoneNumber
        - dateOfBirth
      properties:
        firstName:
          type: string
          example: "Иван"
        lastName:
          type: string
          example: "Иванович"
        middleName:
          type: string
          example: "Иванов"
        tin:
          type: string
          pattern: '^\d{12}$'
          example: "123456789123"
          description: ИНН (12 цифр)
        snils:
          type: string
          pattern: '^\d{11}$'
          example: "12345678900"
          description: СНИЛС (11 цифр)
        dateOfBirth:
          type: string
          format: date
          example: "12.05.1990"
        phoneNumber:
          type: string
          example: "+7(918)1234567"
        email:
          type: string
          format: email
          example: "ivanov@mail.ru"    
    PassportInfo:
      type: object
      required:
        - passportNumber
        - issueDate
        - issuedBy
        - departmentCode
        - placeOfBirth
      properties:
        passportNumber:
          type: string
          example: "1234123456"
          description: Номер паспорта (10 цифр)
        issueDate:
          type: string
          format: date
          example: "10.03.2020"
        issuedBy:
          type: string
          example: "ГУ МВД РФ по Московской области"
        departmentCode:
          type: string
          example: "115-123"
          description: Код подразделения (6 цифр)
        placeOfBirth:
          type: string
          example: "г. Минск"

    AddressPair:
      type: object
      required:
        - registrationAddress
        - residentialAddress
      properties:
        registrationAddress:
          $ref: '#/components/schemas/Address'
        residentialAddress:
          $ref: '#/components/schemas/Address'

    Address:
      type: object
      required:
        - postalCode
        - country
        - city
        - province
        - street
        - building
      properties:
        postalCode:
          type: number
          format: int32
          example: 123456
        country:
          type: string
          example: "Россия"
        province:
          type: string
          example: "Московская обл."
        city:
          type: string
          example: "г. Москва"
        street:
          type: string
          example: "ул. Одинцова"
        building:
          type: string
          example: "12А"
        apartment:
          type: string
          example: "101"

    employmentDetails:
      type: object
      
      properties:
        position:
          type: string
          example: "бухгалтер"
        startDate:
          type: string
          format: date
          example: "12.05.2000"
        salary:
          type: number
          example: 100000
        employmentType:
          type: string
          example: "постоянная"
        companyName:
          type: string
          example: "Мишкин дом"  
        companyPhone:
          type: string
          example: "79801234545"
          description: Номер телефона в формате 7XXXXXXXXXX (11 цифр)
        postalCode:
          type: number
          format: int32
          example: 123456
        country:
          type: string
          example: "Россия"
        province:
          type: string
          example: "Московская обл."
        
        city:
          type: string
          example: "г. Москва"
        street:
          type: string
          example: "ул. Волхонка"
        building:
          type: string
          example: "19А"
        Office:
          type: string
          example: "225"  

    CustomerCreatedResponse:
      type: object
      properties:
        message:
          type: string
          example: "Клиент успешно добавлен"
        customerId:
          type: string
          format: uuid
          example: "78088943-5c24-481c-8fbe-b3a203e9df11"
        passportId:
          type: string
          format: uuid
          example: "79d37bf7-5c0c-4ba4-8fbb-88bb783fe0a7"
        registrationAddressId:
          type: string
          format: uuid
          example: "3de7cb0d-25e8-446d-8ee1-d933bb34040e"
        residentialAddressId:
          type: string
          format: uuid
          example: "35cf8eac-83d4-4a00-83b6-7feb9b7db245"
        employmentDetailsId:
          type: string
          format: uuid
          example: "afb6c6d6-f4b9-4f83-9a74-caac045f3f46"
        createDate:
          type: string
          format: date-time
          example: "2025-02-17T17:30:00.000Z"

    ErrorResponse:
      type: object
      properties:
        uri:
          type: string
          example: "api/v1/user"
        type:
          type: string
          example: "400 BAD REQUEST"
        message:
          type: string
          example: "Некорректный запрос"
        timeStamp:
          type: string
          format: date-time
          example: "2025-02-17T17:30:00.000Z"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token для аутентификации
